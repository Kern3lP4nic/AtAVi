import {Component, OnInit, ViewChild} from '@angular/core';import {Question} from '../../models/question/question';import {Answer} from '../../models/question/answer';import {Action} from '../../models/question/action';import {FormBuilder, FormGroup, Validators} from '@angular/forms';import {ListViewComponent} from '../list-view/listview.component';import {ManageQuestionsService} from '../../services/manageQuestions.service';@Component({  selector: 'app-manage-questions',  templateUrl: './manage-questions.component.html',  styleUrls: ['./manage-questions.component.css'],  providers: [ManageQuestionsService]})export class ManageQuestionsComponent implements OnInit {  @ViewChild('list') list: ListViewComponent;  @ViewChild('list2') list2: ListViewComponent;  private questionArray: Array<Question>        = new Array<Question>();  private answerArray: Array<Answer>            = new Array<Answer>();  private actionArray: Array<Action>            = new Array<Action>();  private questionActionArray: Array<Action>    = new Array<Action>();  private modalAnswerArray: Array<Answer>       = new Array<Answer>();  private allQuestionArray: Array<Question> = new Array<Question>();  private selectedAction: Array<Action>     = new Array<Action>();  private addQuestionModalVisibility      = false;  private updateQuestionModalVisibility   = false;  private addAnswerModalVisibility        = false;  private answerButton                    = true;  private answersList                     = false;  private firstQuestion                   = false;  private addQuestionForm:    FormGroup;  private addAnswerForm:      FormGroup;  private updateQuestionForm: FormGroup;  private selectedActionQuestion: Number;  private selectedNext: Number;  private selectedQuestion: Number;  constructor(private manage: ManageQuestionsService, private formBuilder: FormBuilder) {      this.getQuestions();      const questionRegex: any = '^[a-zA-Z0-9 ?]+$';      this.addQuestionForm = this.formBuilder.group({          'question': [null, Validators.compose([Validators.required, Validators.pattern(questionRegex)])],          'recurrent': [null, Validators.compose([Validators.required, Validators.pattern(questionRegex)])],          'first': false      });      this.updateQuestionForm = this.formBuilder.group({          'question': [null, Validators.compose([Validators.required, Validators.pattern(questionRegex)])],          'recurrent': [null, Validators.compose([Validators.required, Validators.pattern(questionRegex)])],          'first': false      });      const answerRegex: any = '^[a-zA-Z0-9 ]+$';      this.addAnswerForm = this.formBuilder.group({          'answer': [null, Validators.compose([Validators.required, Validators.pattern(answerRegex)])]          // 'action': [null, Validators.required],      });  }  ngOnInit() {}  getQuestions() {      this.manage.getQuestions().subscribe(res => {          res = res.json();          const question = (res['Object']);          for (const questionIndex of question) {              this.answerArray = new Array<Answer>();              const answer = questionIndex.answers;              // Check if a question could be updated              if (questionIndex.dynamic) {                  for (const answerIndex of answer) {                      // Check if the answer's text exists                      if (answerIndex.text) {                          this.answerArray.push(new Answer(answerIndex.text, answerIndex.id_nextQuestion, answerIndex.actions));                      } else {                          this.answerArray.push(new Answer('Qualsiasi', answerIndex.id_nextQuestion, answerIndex.actions));                      }                  }                  this.questionArray.push(new Question(Number(questionIndex.id), questionIndex.baseText, questionIndex.recurrentText, questionIndex.dynamic, questionIndex.isFirst, questionIndex.questionAction, this.answerArray));              }              // Push into the array with all questions              this.allQuestionArray.push(new Question(Number(questionIndex.id), questionIndex.baseText, questionIndex.recurrentText, questionIndex.dynamic, questionIndex.isFirst, questionIndex.questionAction, this.answerArray));          }      }, err => {          err = err.json();          console.log(err);      });  }  // To delete a question's answer  onSelectedAnswer(index) {      // Remove the selected answer from the array      this.modalAnswerArray.splice(index, 1);      if (this.modalAnswerArray.length === 0) {          this.answersList = false;      }  }  addQuestionSubmit(value: any) {      // To obtain next id      let id = 0;      for (const index of this.questionArray) {          if (id < index.getId()) {            id = index.getId();          }      }      id++;      this.manage.addQuestion(id, value.question, value.recurrent, true, false, this.selectedActionQuestion, this.modalAnswerArray).subscribe(res => {          this.questionArray.push(new Question(id, value.question, value.recurrent, true, false, this.selectedActionQuestion, this.modalAnswerArray));          this.allQuestionArray.push(new Question(id, value.question, value.recurrent, true, false, this.selectedActionQuestion, this.modalAnswerArray));        this.closeModal();      }, err => {          err = err.json();          console.log(err);      });  }  // Add a new answer to the array  addAnswerSubmit(value: any) {      if (value.answer === 'null') {          this.modalAnswerArray.push(new Answer('Qualsiasi', this.selectedNext, this.selectedAction));      } else {          this.modalAnswerArray.push(new Answer(value.answer, this.selectedNext, this.selectedAction));      }      this.answersList = true;      this.selectedAction = new Array<Action>();      this.selectedNext = null;      this.closeDialog();  }  // Update the selected question  updateQuestionSubmit(value: any) {      for (const index of this.modalAnswerArray) {            if (index.getText() === 'Qualsiasi') {                index.setText(null);            }      }      this.manage.updateQuestion(this.questionArray[Number(this.selectedQuestion)].getId(), value.question, value.recurrent, true, value.first, this.selectedActionQuestion, this.modalAnswerArray).subscribe(res => {          this.closeUpdateModal();          this.questionActionArray  = new Array<Action>();          this.questionArray        = new Array<Question>();          this.allQuestionArray     = new Array<Question>();          this.getQuestions();      }, err => {          err = err.json();          console.log(err);      });  }  // Get the action from the db  getActionsSelection() {      this.actionArray = new Array<Action>();      this.manage.getActions().subscribe(res => {          res = res.json();          const action = (res['Object']);          for (const actionIndex of action) {              if (actionIndex.isQuestion) {                  this.questionActionArray.push(new Action(actionIndex.id_action, actionIndex.text, true));              } else {                  this.actionArray.push(new Action(actionIndex.id_action, actionIndex.text, false));              }          }      }, err => {          err = err.json();          console.log(err);      });  }  onSelectedAction(value: any) {      // To get action's id      for (const action of this.actionArray) {          if (action.getId() == value) {              this.selectedAction.push(new Action(value, action.getText(), false));          }      }  }  // Save the question's action  onSelectedActionQuestion(value: any) {      for (const action of this.questionActionArray) {          if (action.getId() == value) {            console.log(action);              this.selectedActionQuestion = +value;          }      }  }  // Save the next question  onSelectedNext(value: any) {      this.selectedNext = +value;  }  // Check if exists a first question  checkBox() {      if (this.firstQuestion === true) {          this.firstQuestion = false;      } else {          for (const questionIndex of this.allQuestionArray) {              if (questionIndex.isFirstQuestion()) {                  this.firstQuestion = true;                  break;              }          }      }  }  // Insert the update question's form  updateRow(selectedIndex) {      this.selectedQuestion = selectedIndex;      const question = this.questionArray[selectedIndex];      for (const index of question.getAnswers()) {          this.modalAnswerArray.push(new Answer(index.getText(), index.getIdNextQuestion(), index.getActions()));      }      if (0 < this.modalAnswerArray.length) {          this.answersList = true;      }      this.selectedActionQuestion = question.getAction();      this.updateQuestionForm.setValue({          'question': question.getBaseText(),          'recurrent': question.getRecurrentText(),          'first': question.isFirstQuestion() ? question.isFirstQuestion() : false  // Verificare      });  }  // Delete a selected question  deleteRow(index) {      this.manage.deleteQuestion(this.questionArray[index].getId(), this.questionArray[index].getBaseText(), this.questionArray[index].getRecurrentText(), this.questionArray[index].isDynamic(), this.questionArray[index].isFirstQuestion(), this.questionArray[index].getAction(), this.questionArray[index].getAnswers()).subscribe(res => {          // Remove the selected question from the array          this.questionArray.splice(index, 1);      }, err => {          err = err.json();          console.log(err);      });  }  closeModal() {      this.addQuestionModalVisibility = false;      this.answersList   = false;      this.firstQuestion = false;      this.closeDialog();      this.modalAnswerArray     = new Array<Answer>();      this.questionActionArray  = new Array<Action>();      this.addQuestionForm.reset();  }  closeDialog() {      this.addAnswerModalVisibility  = false;      this.answerButton = true;      this.addAnswerForm.reset();  }  closeUpdateModal() {      this.updateQuestionModalVisibility  = false;      this.addAnswerModalVisibility       = false;      this.answerButton                   = true;      this.firstQuestion                  = false;      this.modalAnswerArray     = new Array<Answer>();      this.questionActionArray  = new Array<Action>();      this.updateQuestionForm.reset();  }}